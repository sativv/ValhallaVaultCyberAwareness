@page "/AdminQ/{Id:int}"
@using ValhallaVaultCyberAwareness.Components.BComponents
@using ValhallaVaultCyberAwareness.Models
@using ValhallaVaultCyberAwareness.Repository
@inject ValhallaUow uow
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@inject NavigationManager navManager


@if (Answers == null || currentSubcategory == null || Subcategories == null || Question == null)
{
    <h1>Loading...</h1>
}
else{

  

<div class="d-flex mt-5 justify-content-center" style="height:100vh;">
    <div class="card bg-dark w-50 align-items-center text-center ">
        <h3 class="mb-5">Currently Editing Subcategory: @Question.Title</h3>
            <p class="w-75">Old Name: @Question.Title</p>
         
            <input type="text" placeholder="New Name" class="inputBorder w-75" @bind="newName" />
            <OldVersionComponent Title="Old Explanation Text" Text="@Question.ExplanationText"></OldVersionComponent>
           
            <textarea placeholder="New Explanation Text" class="inputBorder w-75" @bind="newExplanationText"></textarea>
            <OldVersionComponent Title="Old Question Text:" Text="@Question.Text"></OldVersionComponent>
       
            <textarea placeholder="New Question Text" class="inputBorder w-75" @bind="newQuestionText"></textarea>

           
          
                
                <p class="mt-1 w-75">Old Answer: @firstAnswer.Text | <span class="@(firstAnswer.IsCorrectAnswer ? "text-success" : "text-danger" )">@(firstAnswer.IsCorrectAnswer ? "Correct" : "Incorrect")</span></p>
                <input type="text" placeholder="New Answer" class="inputBorder w-75" @bind="newFirstAnswerText"/>
                <select class="inputBorder w-75" @bind="@isAnswer1Correct">
                <option value="" selected="selected">Correct/Incorrect</option>
                <option value="True" style="background-color:#292b2c; color:green !important;" >Correct</option>
                <option value="False" style="background-color:#292b2c; color:red !important;">Incorrect</option>
                    
                   
                </select>

            <p class="mt-1 w-75">Old Answer: @secondAnswer.Text | <span class="@(secondAnswer.IsCorrectAnswer ? "text-success" : "text-danger" )">@(secondAnswer.IsCorrectAnswer ? "Correct" : "Incorrect")</span></p>
            <input type="text" placeholder="New Answer" class="inputBorder w-75"  @bind="newSecondAnswerText"/>
            <select class="inputBorder w-75" @bind="@isAnswer2Correct">
                <option value="" selected="selected">Correct/Incorrect</option>
                <option value="True" style="background-color:#292b2c; color:green !important;">Correct</option>
                <option value="False" style="background-color:#292b2c; color:red !important;">Incorrect</option>


            </select>
            <p class="mt-1 w-75">Old Answer: @thirdAnswer.Text | <span class="@(thirdAnswer.IsCorrectAnswer ? "text-success" : "text-danger" )">@(thirdAnswer.IsCorrectAnswer ? "Correct" : "Incorrect")</span></p>
            <input type="text" placeholder="New Answer" class="inputBorder w-75"  @bind="newThirdAnswerText"/>
            <select class="inputBorder w-75" @bind="@isAnswer3Correct">
                <option value="" selected="selected">Correct/Incorrect</option>
                <option value="True" style="background-color:#292b2c; color:green !important;" >Correct</option>
                <option value="False" style="background-color:#292b2c; color:red !important;" >Incorrect</option>


            </select>
            @if (ErrorMessageQuestion != "")
            {
                <div class="alert alert-danger mt-3" role="alert">
                    @ErrorMessageQuestion
                </div>
            }
            <label class="mt-2">Change Subcategory</label>
            <select @bind="newSubcategory" class="inputBorder w-75 mt-3">
                <option selected value="@currentSubcategory.Id"> current subcategory: @currentSubcategory.Title</option>
                @foreach (var sub in Subcategories)
                {
                    <option value="@sub.Id" style="background-color:#292b2c">@sub.Title</option>
                }
            </select>
            <button class="btn buttonBorder btn-block w-75 mt-3" @onclick="EditQuestion">Edit Question!</button>
          
        </div>
    </div>
}


@code {
    [Parameter]
    public int Id { get; set; }
    QuestionModel Question = new();
    private List<AnswerModel> Answers = new();
    List<SubCategoryModel> Subcategories = new();
    public int AnswerToEdit;

    private SubCategoryModel currentSubcategory;
    private int newSubcategory;

    private AnswerModel? firstAnswer;
    private string? firstAnswerText;
    private AnswerModel? secondAnswer;
    private string? secondAnswerText;
    private AnswerModel? thirdAnswer;
    private string? thirdAnswerText;

    private string newExplanationText;
    private string newName;
    private string newQuestionText;





    private string newFirstAnswerText = "";
    private string newSecondAnswerText = "";
    private string newThirdAnswerText = "";

    string isAnswer1Correct = "";
    string isAnswer2Correct = "";
    string isAnswer3Correct = "";

    string ErrorMessageQuestion = "";



    protected override async Task OnInitializedAsync()
    {
        Question = await uow.QuestionRepo.GetByIdAsync(Id);
        Answers = await uow.AnswerRepo.GetAnswersToQuestionsAsync(Id);
        currentSubcategory = await uow.SubcategoryRepo.GetByIdAsync(Question.SubCategoryId);
        Subcategories = await uow.SubcategoryRepo.GetAllAsync();

        firstAnswer = Answers[0];
        secondAnswer = Answers[1];
        thirdAnswer = Answers[2];

    }

    private async Task EditQuestion()
    {
        if (string.IsNullOrEmpty(isAnswer1Correct) && string.IsNullOrEmpty(isAnswer2Correct) && string.IsNullOrEmpty(isAnswer3Correct) && string.IsNullOrEmpty(newFirstAnswerText) && string.IsNullOrEmpty(newSecondAnswerText) && string.IsNullOrEmpty(newThirdAnswerText) && string.IsNullOrEmpty(newExplanationText) && string.IsNullOrEmpty(newQuestionText) && string.IsNullOrEmpty(newName) && newSubcategory == 0)
        {
            ErrorMessageQuestion = "No changes detected";
            StateHasChanged();
            return;
        }
        int trueAnswerCount = 0;
        int falseAnswerCount = 0;
        if (isAnswer1Correct == "True")
            trueAnswerCount++;
        else if (isAnswer1Correct == "False")
            falseAnswerCount++;

        if (isAnswer2Correct == "True")
            trueAnswerCount++;
        else if (isAnswer2Correct == "False")
            falseAnswerCount++;

        if (isAnswer3Correct == "True")
            trueAnswerCount++;
        else if (isAnswer3Correct == "False")
            falseAnswerCount++;

        QuestionModel updatedQuestion = new(){
        ExplanationText = newExplanationText,
        Text = newQuestionText,
        Title = newName,
        SubCategoryId = newSubcategory
        };

        if(isAnswer1Correct == "" && isAnswer2Correct == "" && isAnswer3Correct == "")
        {


            await uow.QuestionRepo.UpdateAsync(Id, updatedQuestion);
            await JSRuntime.InvokeVoidAsync("alert", "Question was successfully updated!");
            navManager.NavigateTo("/Admin");
        } 
        else
        {
            if (trueAnswerCount == 1 && falseAnswerCount == 2)
            {
                // exactly one answer is correct, update answers to question
                if(newFirstAnswerText != null && isAnswer1Correct != "")
                {

                    AnswerModel firstAnswerToUpdate = new()
                    {
                        Text = newFirstAnswerText,
                        IsCorrectAnswer = isAnswer1Correct == "True" ? true : false
                    };
                    await uow.AnswerRepo.UpdateAsync(firstAnswer.Id, firstAnswerToUpdate);
                }
                if (newSecondAnswerText != null && isAnswer2Correct != "")
                {
                    AnswerModel secondAnswerToUpdate = new()
                        {
                            Text = newSecondAnswerText,
                            IsCorrectAnswer = isAnswer2Correct == "True" ? true : false,
                        };
                    await uow.AnswerRepo.UpdateAsync(secondAnswer.Id, secondAnswerToUpdate);
                }
                if (newThirdAnswerText != null && isAnswer3Correct != "")
                {
                    AnswerModel thirdAnswerToUpdate = new()
                        {
                            Text = newThirdAnswerText,
                            IsCorrectAnswer = isAnswer3Correct == "True" ? true : false
                        };
                    await uow.AnswerRepo.UpdateAsync(thirdAnswer.Id, thirdAnswerToUpdate);
                }


                if (!await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to edit this question and its answers?"))
                    return;

               
         
                await uow.QuestionRepo.UpdateAsync(Id, updatedQuestion);
                await JSRuntime.InvokeVoidAsync("alert", "Question was successfully updated!");
                navManager.NavigateTo("/Admin");
            }

            else
                {
                    if (trueAnswerCount > 1) ErrorMessageQuestion = "Only ONE answer can be correct";
                    if (trueAnswerCount < 1) ErrorMessageQuestion = "One answer must be marked as correct";
                    if (falseAnswerCount < 2) ErrorMessageQuestion = "One answer must be marked correct, and 2 incorrect";
                    StateHasChanged();
                    return;
                    // more or less than one correct answer, warn the user
                }
            }

      
    }
}
