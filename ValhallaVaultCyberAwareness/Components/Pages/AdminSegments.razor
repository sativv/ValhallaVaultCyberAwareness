@page "/AdminS/{Id:int}"
@using ValhallaVaultCyberAwareness.Components.BComponents
@using ValhallaVaultCyberAwareness.Models
@using ValhallaVaultCyberAwareness.Repository
@inject ValhallaUow uow
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@inject NavigationManager navManager

@if(Segment == null || Category == null || Categories == null)
{
    <h1>Loading..</h1>
} else
{
    <div class="d-flex vh-100 mt-5 justify-content-center">
        <div class="card bg-dark w-50 align-items-center text-center">
        <h1>Currently Editing Segment: @Segment.Name </h1>

        <label class="mt-3 mb-1 fw-bold">Old Name: @Segment.Name</label><input class="inputBorder  w-75" @bind="newSegmentName" type="text" placeholder="Name of Segment"/>
        <OldVersionComponent Title="Old Info Text:" Text="@Segment.InfoText"></OldVersionComponent><textarea @bind="newInfoText" class="inputBorder  w-75"  placeholder="Info Text"/>

          <label class="mt-3 mb-1 fw-bold">Change Category</label> <select @bind="PickedCategory" class="inputBorder w-75" >
                <option value="@Category.Id">Currently in Category: @Category.Name</option>
                @foreach(var category in Categories)
                {
                    <option value="@category.Id" style="background-color:#292b2c">@category.Name</option>
                }
            </select>
            <button class="btn buttonBorder btn btn-block mt-3 w-50" @onclick="() => UpdateSegment(PickedCategory, newSegmentName, newInfoText)">Update Segment</button>
        </div>
    </div>
}


@code {
    [Parameter]
    public int Id  { get; set; }

    private SegmentModel Segment { get; set; }
    // private List<QuestionModel> Questions;
    private CategoryModel Category { get; set; }
    private List<CategoryModel> Categories { get; set; }




    [Parameter]
    public string newSegmentName { get; set; } 
    [Parameter]
    public string newInfoText { get; set; } 
    private int PickedCategory;



    protected override async Task OnInitializedAsync()
    {
        Segment = await uow.SegmentRepo.GetByIdAsync(Id);
        // Questions = await uow.QuestionRepo.GetQuestionsInSegmentAsnyc(Segment.Id)
        Category = await uow.CategoryRepo.GetByIdAsync(Segment.CategoryId);
        Categories = await uow.CategoryRepo.GetAllAsync();
        PickedCategory = Segment.CategoryId;
    }

    private async Task UpdateSegment(int pickedCategory, string infoText, string Name)
    {
        if (pickedCategory != 0 || !string.IsNullOrEmpty(infoText) || !string.IsNullOrEmpty(Name))
        {
            if (!await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to update this segment?"))
                return;


            SegmentModel updatedSegment = new()
                {
                    Name = Name,
                    CategoryId = PickedCategory,
                    InfoText = infoText
                };

                uow.SegmentRepo.UpdateAsync(Segment.Id, updatedSegment);
            navManager.NavigateTo("/admin");
        }

    }
}
