@page "/Admin"
@using Microsoft.AspNetCore.Authorization
@using ValhallaVaultCyberAwareness.Components.BComponents
@using ValhallaVaultCyberAwareness.Models
@using ValhallaVaultCyberAwareness.Repository
@attribute [Authorize(Roles = "Admin")]
@inject NavigationManager navManager
@rendermode InteractiveServer
@inject ValhallaUow uow 





@if (Categories == null || Segments == null)
{
    <h1>Loading..</h1>
}
else
{
    <div class="row mt-3 justify-content-center">
        
            <div class="col-md-6">
                <div class="card" style="border:none;">
                    <div class="card-body bg-dark" style="border:1px solid #0d5959">
                        <h3 class="card-title text-center">Create a new Category!</h3>
                        @if (ErrorMessageCategory != "")
                        {
                            <div class="alert alert-danger" role="alert">
                                @ErrorMessageCategory
                            </div>
                        }
                        else if (CategorySuccessMessage != "")
                        {
                            <div class="alert alert-success" role="alert">
                                @CategorySuccessMessage
                            </div>
                        }
                        <div class="d-flex flex-column align-items-center">
                            <input type="text" class="inputBorder mb-2 w-75" placeholder="Category Name" @bind=categoryName required>
                            
                            <button class="btn buttonBorder btn-block w-75 mb-3" @onclick="AddCategory">Add Category</button>
                            <EditCategoryComponent Categories="Categories"></EditCategoryComponent>
                        </div>
                    </div>
                </div>
            </div>
       
        </div>

        <div class="row justify-content-center mt-3">
            <div class="col-md-6">
                <div class="card" style="border:none;">
                    <div class="card-body bg-dark" style="border:1px solid #0d5959">
                        <h3 class="card-title text-center">Create a new Segment!</h3>
                        @if (ErrorMessageSegment != "")
                        {
                            <div class="alert alert-danger" role="alert">
                                @ErrorMessageSegment
                            </div>
                        }
                        else if (SegmentSuccessMessage != "")
                        {
                            <div class="alert alert-success" role="alert">
                                @SegmentSuccessMessage
                            </div>
                        }

                        <div class="d-flex flex-column align-items-center">
                            <input type="text" class="inputBorder mb-2 w-75" @bind=segmentName placeholder="Segment Name" required>
                            <textarea class="inputBorder mb-2 w-75" rows="3" placeholder="Segment Information" @bind=segmentInformation required></textarea>
                            <select @bind="segmentCategoryId" class="inputBorder mb-2 w-75" required>
                                <option selected>Select Subcategory</option>
                                @foreach (var category in Categories)
                                {
                                    <option value="@category.Id" style="background-color:#292b2c">@category.Name</option>
                                }
                            </select>
                            <button class="btn buttonBorder btn-block w-75 mb-3" @onclick="AddSegment">Add Segment</button>
                            <EditSegmentComponent Segments="Segments" Categories="Categories"></EditSegmentComponent>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    <div class="row mt-3 justify-content-center">
        <div class="col-md-6">
            
                <div class="card" style="border:none">
                    <div class="card-body bg-dark" style="border:1px solid #0d5959">
                        <h3 class="card-title text-center">Create a new Subcategory!</h3>

                        @if (ErrorMessageSubcategory != "")
                        {
                            <div class="alert alert-danger" role="alert">
                                @ErrorMessageSubcategory
                            </div>
                        }
                        else if (SubcategorySuccessMessage != "")
                        {
                            <div class="alert alert-success" role="alert">
                                @SubcategorySuccessMessage
                            </div>
                        }
                        <div class="d-flex flex-column align-items-center">
                            <input type="text" class="inputBorder mb-2 w-75" placeholder="Subcategory Title" @bind="subcategoryName" />
                            <input type="text" class="inputBorder mb-2 w-75" placeholder="Image URL" @bind="subcategoryImage" />
                            <textarea class="inputBorder mb-2 w-75" placeholder="Info Text" @bind="subcategoryInfotext" />
                            <select @bind="subcategorySegmentId" class="inputBorder mb-2 w-75" required>
                                <option selected>Select Segment</option>
                                @foreach (var segment in Segments)
                                {
                                    <option value="@segment.Id" style="background-color:#292b2c">@segment.Name</option>
                                }
                            </select>
                            <button class="btn buttonBorder btn-block w-75 mb-3" @onclick="AddSubcategory">Add Subcategory</button>
                            <EditSubCategoryComponent SubCategories="Subcategories"></EditSubCategoryComponent>
                        </div>
                    </div>
                </div>
         
        </div>
    </div>


        <div class="row justify-content-center mt-3">
            <div class="col-md-6">
                <div class="card" style="border:none;">
                    <div class="card-body bg-dark" style="border:1px solid #0d5959">
                        <h3 class="card-title text-center">Add a new question!</h3>
                        @if (ErrorMessageQuestion != "")
                        {
                            <div class="alert alert-danger" role="alert">
                                @ErrorMessageQuestion
                            </div>
                        }
                        else if (QuestionSuccessMessage != "")
                        {
                            <div class="alert alert-success" role="alert">
                                @QuestionSuccessMessage
                            </div>
                        }
                        <div class="d-flex flex-column align-items-center">
                            <input type="text" class="inputBorder mb-2 w-75" placeholder="Title" @bind=questionTitle required>
                            <textarea class="inputBorder mb-2 w-75" rows="3" placeholder="Question Text" @bind=questionText required></textarea>
                            <textarea class="inputBorder mb-2 w-75" rows="3" placeholder="Explanation Text" @bind=questionExplanationText required></textarea>
                            <select @bind="questionSegmentId" class="inputBorder mb-2 w-75" required>
                                <option>Select Subcategory</option>
                                @foreach (var sub in Subcategories)
                                {
                                    var segment = Segments.FirstOrDefault(c => c.Id == sub.SegmentId);
                                    <option value="@segment.Id" style="background-color:#292b2c;">@sub.Title in @segment.Name </option>
                                }
                            </select>
                            <input type="text" class="inputBorder mb-2 w-75 mt-3" placeholder="First Answer" @bind=firstAnswer required>
                            <select class="inputBorder mb-2 w-75" @bind=isFirstAnswerCorrect>
                                <option value="" disabled selected>Correct/Incorrect</option>
                                <option value="True" style="background-color:#292b2c; color:green !important;">Correct Answer</option>
                                <option value="False" style="background-color:#292b2c; color:red !important;">Incorrect Answer</option>
                            </select>
                            <input type="text" class="inputBorder mb-2 w-75 mt-3" placeholder="Second Answer" @bind=secondAnswer required>
                            <select class="inputBorder mb-2 w-75" @bind=isSecondAnswerCorrect>
                                <option value="" disabled selected>Correct/Incorrect</option>
                                <option value="True" style="background-color:#292b2c; color:green !important;">Correct Answer</option>
                                <option value="False" style="background-color:#292b2c; color:red !important;">Incorrect Answer</option>
                            </select>
                            <input type="text" class="inputBorder mb-2 w-75 mt-3" placeholder="Third Answer" @bind=thirdAnswer required>
                            <select class="inputBorder mb-2 w-75 " @bind=isThirdAnswerCorrect>
                                <option value="" disabled selected>Correct/Incorrect</option>
                                <option value="True" style="background-color:#292b2c; color:green !important;">Correct Answer</option>
                                <option value="False" style="background-color:#292b2c;color:red !important;">Incorrect Answer</option>
                            </select>
                            <button class="btn  buttonBorder btn-block w-75 mb-3" @onclick="AddQuestion">Add Question</button>
                            <EditQuestionComponent Questions="Questions"></EditQuestionComponent>
                        </div>

                    </div>
                </div>
            </div>
        </div>

}


@code {
    private List<CategoryModel> Categories { get; set; }
    private List<SegmentModel> Segments { get; set; }
    private List<QuestionModel> Questions { get; set; }
    private List<SubCategoryModel> Subcategories { get; set; }
    private string segmentName;
    private string segmentInformation;
    private int? segmentCategoryId;



    private string firstAnswer = "";
    private string secondAnswer = "";
    private string thirdAnswer = "";

    private string isFirstAnswerCorrect = "";
    private string isSecondAnswerCorrect = "";
    private string isThirdAnswerCorrect = "";

    private string ErrorMessageQuestion = "";
    private string ErrorMessageCategory = "";
    private string ErrorMessageSegment = "";
    private string ErrorMessageSubcategory = "";

    private string QuestionSuccessMessage = "";
    private string SegmentSuccessMessage = "";
    private string CategorySuccessMessage = "";
    private string SubcategorySuccessMessage = "";

    private string categoryName;

    private string questionText;
    private string questionExplanationText;
    private string questionTitle;
    private int? questionSegmentId;


    private string subcategoryName;
    private string subcategoryImage;
    private string subcategoryInfotext;
    private int subcategorySegmentId;


    protected override async Task OnInitializedAsync()
    {
        Segments = await uow.SegmentRepo.GetAllAsync();
        Categories = await uow.CategoryRepo.GetAllAsync();
        Questions = await uow.QuestionRepo.GetAllAsync();
        Subcategories = await uow.SubcategoryRepo.GetAllAsync();
    }
    private void NavToPage()
    {
        navManager.NavigateTo("/Admin/Edit");
    }

    private async Task AddSegment()
    {
        if(segmentName != null && segmentInformation != null && segmentCategoryId != null)
        {


            SegmentModel segmentToAdd = new()
        {
            Name = segmentName,
            InfoText = segmentInformation,
            CategoryId = segmentCategoryId.Value
        };
            await uow.SegmentRepo.AddAsync(segmentToAdd);
            await uow.SegmentRepo.SaveChangesAsync();
            Segments.Add(segmentToAdd);
            StateHasChanged();
            segmentName = "";
            segmentInformation = "";
            segmentCategoryId = 1;
            ErrorMessageSegment = "";
            SegmentSuccessMessage = $"The {segmentToAdd.Name} Segment Was Successfully Added";

        } else
        {
            ErrorMessageSegment = "You are required to all fields and pick a category in order to add a new segment!";
        }

    }

    private async Task AddCategory()
    {
        if (categoryName != null)
        {
            CategoryModel categoryToAdd = new()
                {
                    Name = categoryName,

                };

            await uow.CategoryRepo.AddAsync(categoryToAdd);
            Categories.Add(categoryToAdd);
            StateHasChanged();
            categoryName = "";
            ErrorMessageCategory = "";
            CategorySuccessMessage = $"The {categoryToAdd.Name} Category Was Successfully Created!";

        }
        else
        {
            ErrorMessageCategory = "You are required to all fields in order to add a new category!";
        }

    }

    private async Task AddSubcategory()
    {
        if(subcategoryName != null)
        {
            SubCategoryModel subcategoryToAdd = new()
                {
                    Title = subcategoryName,
                    SegmentId = subcategorySegmentId,
                    InfoText = subcategoryInfotext,
                    Image = subcategoryImage,

                };

                await uow.SubcategoryRepo.AddAsync(subcategoryToAdd);
                Subcategories.Add(subcategoryToAdd);
                StateHasChanged();
                subcategoryName = "";
                subcategoryImage = "";
                subcategoryInfotext = "";
                subcategorySegmentId = 0;
                SubcategorySuccessMessage = $"The subcategory {subcategoryToAdd.Title} was successfully created!";
                
        }
    }

    private async Task AddQuestion()
    {
        int trueAnswerCount = 0;
        if (isFirstAnswerCorrect == "True") trueAnswerCount++;
        if (isSecondAnswerCorrect == "True") trueAnswerCount++;
        if (isThirdAnswerCorrect == "True") trueAnswerCount++;

        if (trueAnswerCount != 1)
        {
            if (trueAnswerCount > 1) ErrorMessageQuestion = "Only ONE answer can be correct";
            if (trueAnswerCount < 1) ErrorMessageQuestion = "One answer must be marked as correct";
            return;
        }


        if ( !string.IsNullOrEmpty(questionTitle) &&  !string.IsNullOrEmpty(questionText)  && !string.IsNullOrEmpty(questionExplanationText)  && questionSegmentId > 0 )
        {


            QuestionModel questionToAdd = new()
                {
                    Title = questionTitle,
                    ExplanationText = questionExplanationText,
                    SubCategoryId = questionSegmentId.Value,
                    Text = questionText
                };
            await uow.QuestionRepo.AddAsync(questionToAdd);
            Questions.Add(questionToAdd);
            StateHasChanged();


            await AddAnswers(questionToAdd.Id);
            
            questionTitle = "";
            questionText = "";
            questionExplanationText = "";
            questionSegmentId = 0;
            ErrorMessageQuestion = "";
            QuestionSuccessMessage = "Question Added Succesfully!";


        }
        else
        {
            ErrorMessageQuestion = "You are required to all fields and pick a segment in order to add a new question!";

        }

    }

    private async Task AddAnswers(int questionId)
    {
       

                AnswerModel firstAnswerToAdd = new()
            {
                QuestionId = questionId,
                IsCorrectAnswer = isFirstAnswerCorrect=="True" ? true:false,
                Text = firstAnswer

            };

                await uow.AnswerRepo.AddAsync(firstAnswerToAdd);


            AnswerModel secondAnswerToAdd = new()
            {
                QuestionId = questionId,
                Text = secondAnswer,
                IsCorrectAnswer = isSecondAnswerCorrect == "True" ? true:false
            };

            await uow.AnswerRepo.AddAsync(secondAnswerToAdd);



            AnswerModel thirdAnswerToAdd = new()
            {
                QuestionId = questionId,
                Text = thirdAnswer,
                IsCorrectAnswer = isThirdAnswerCorrect == "True"? true:false
            };

            await uow.AnswerRepo.AddAsync(thirdAnswerToAdd);
    } 
        
           

        
    
}
