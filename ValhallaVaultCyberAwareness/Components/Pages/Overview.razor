@page "/home"
@using Microsoft.AspNetCore.Authorization
@using ValhallaVaultCyberAwareness.Components.BComponents
@using ValhallaVaultCyberAwareness.Models
@using ValhallaVaultCyberAwareness.Repository
@rendermode InteractiveServer
@inject ValhallaUow uow
@inject NavigationManager navManager
@attribute [Authorize]


@* visa alla kategorier med nav till varje kategori
se hur många delar man klarat av i varje kategori i %
sökruta för att söka på en kategori *@
@if (categories == null)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
        <h1>Loading...</h1>
    </div>
}
else
{
    <div class="container vh-100 justify-content-center">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <input type="text" placeholder="Search" @oninput="FilterCategories" class="inputBorder mb-3 w-100" />
                <div class="card bg-dark text-light text-center p-4" style="height: 100vh;">
                    <h1 style="color:#21e8ef" class="mb-5">Browse Our Categories!</h1>
                    @if (isFiltered && filteredCategories.Any())
                    {
                        @foreach (var category in filteredCategories)
                        {
                            <div class="mb-1">
                                <CategoryComponent Category="category"></CategoryComponent>
                            </div>
                        }
                    }
                    else if (!filteredCategories.Any() && isFiltered)
                    {
                        <h3 style="color:#21e8ef;">Not Found..</h3>
                    }
                    else
                    {
                        @foreach (var category in categories)
                        {
                            if (category != null)
                            {
                                <div class="mb-1">
                                    <CategoryComponent Category="category"></CategoryComponent>
                                </div>
                            }
                        }
                    }
                </div>
            </div>
        </div>
    </div>



}



@code {
    List<CategoryModel> categories = new();
    List<CategoryModel> filteredCategories = new();

    [Parameter]
    public string filterString { get; set; }

    bool isFiltered;


    protected override async Task OnInitializedAsync()
    {
        categories = await uow.CategoryRepo.GetAllAsync();

        
    }
    private void navToSegmentPage(int id)
    {
        navManager.NavigateTo($"/Category/{id}");
    }

    private void FilterCategories(ChangeEventArgs e)
    {
        if (string.IsNullOrEmpty(e.Value.ToString()))
        {
            isFiltered = false;
            return;
        }
        filteredCategories = categories.Where(c => c.Name.ToLower().Contains(e.Value.ToString().ToLower())).ToList();
        isFiltered = true;
    }
}
