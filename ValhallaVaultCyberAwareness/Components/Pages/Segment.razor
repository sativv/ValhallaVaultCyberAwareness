@page "/Segment/{Id:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using ValhallaVaultCyberAwareness.Data
@using ValhallaVaultCyberAwareness.Managers
@using ValhallaVaultCyberAwareness.Models
@using ValhallaVaultCyberAwareness.Repository
@inject ValhallaUow uow
@inject QuestionManager questionManager
@inject SignInManager<ApplicationUser> signInManager
@inject AuthenticationStateProvider authenticationStateProvider
@* @attribute [Authorize] *@

@if (ChosenSegment == null)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
        <h1 class="text-white">Loading...</h1>
    </div>
}
else
{
   

    <div class="d-flex flex-column align-items-center">
        <h2>@ChosenSegment.Name</h2>
        <p class="mb-2">Some Information About This Segment:</p>
        <h3>@ChosenSegment.InfoText</h3>
    </div>

        <div class="d-flex justify-content-center">
            <ul class="list-group w-50 text-center">


                @foreach (var question in questions)
                {
                    <li class="list-group-item list-group-item-info"><a href="/question/@question.Id" class="@((question.IsAnsweredCorrectly) ? "text-success" : "text-danger")">@question.Title</a></li>
                }
            </ul>
        </div>
    
    <br />
         
}
@if(completionPercentage != null)
{
    <h5>Completion: @completionPercentage%</h5>
}


<a href="/home" class="btn btn-lg buttonBorder">Go back</a>


@code {
    [Parameter]
    public int Id { get; set; }
    public SegmentModel? ChosenSegment { get; set; }
    private List<QuestionViewModel> questions = new();
    private bool questionAnsweredCorrectly;
    private double? completionPercentage;

    private ApplicationUser? signedInUser;
    private AuthenticationState authenticationState;

    protected override async Task OnParametersSetAsync()
    {
        authenticationState = await authenticationStateProvider.GetAuthenticationStateAsync();
        if (authenticationState.User.Identity.IsAuthenticated)
        {
            signedInUser = await signInManager.UserManager.GetUserAsync(authenticationState.User);
        }

        ChosenSegment = await uow.SegmentRepo.GetByIdAsync(Id);

        //Gör ViewModel som innehåller användarens progress så man kan displaya röd eller grön text.
        foreach(var question in ChosenSegment.Questions)
        {
            QuestionViewModel newQuestion = new()
            {
                Id = question.Id,
                Title = question.Title,
            };
            try
            {
                //Kollar vad användaren har svarat
                newQuestion.IsAnsweredCorrectly = await questionManager.QuestionAnsweredCorrectly(question.Id, signedInUser);
            }
            catch
            {
                //Användaren har inte svarat på frågan
                newQuestion.IsAnsweredCorrectly = false;
            }

            questions.Add(newQuestion);
        }
        try
        {
            //Räknar ut användarens svarsprocent
            completionPercentage = await questionManager.CalculateCorrectPercentage(ChosenSegment.Id, signedInUser);
        }
        catch
        {
            //Har inte svarat på frågorna än eller så finns det inga frågor i segmentet
        }

    }
    
}
