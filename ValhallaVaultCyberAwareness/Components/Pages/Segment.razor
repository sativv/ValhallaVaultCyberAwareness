@page "/Segment/{Id:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using ValhallaVaultCyberAwareness.Data
@using ValhallaVaultCyberAwareness.Managers
@using ValhallaVaultCyberAwareness.Models
@using ValhallaVaultCyberAwareness.Repository
@inject ValhallaUow uow
@inject QuestionManager questionManager
@inject SignInManager<ApplicationUser> signInManager
@inject AuthenticationStateProvider authenticationStateProvider
@attribute [Authorize]

@if (ChosenSegment == null)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
        <h1 class="text-white">Loading...</h1>
    </div>
}
else
{
     <div class="card bg-dark text-light text-center p-4" >
          <h2 style="color:#21e8ef" class="mb-5">@ChosenSegment.Name</h2>
        <div class="d-flex flex-column align-items-center">

            <p class="mb-2" style="color:#21e8ef">Some Information About This Segment:</p>
            <h3 style="color:#21e8ef">@ChosenSegment.InfoText</h3>
         
            <ul class="list-group w-50 text-center">
                @foreach(var subcategory in subCategories)
                {
                    <button class="btn buttonBorder mt-4" @onclick="ToggleCollapse">@subcategory.Title</button>
                    @* Den här IsCollapsed funkar inte som jag vill. Göra en separat komponent av den kanske? *@
                    <div class="@(IsCollapsed? "" : "")">
                        <div class="card bg-dark text-light" style="border:none;">
                            <div class="card-body">
                                @for(int i=0; i < subcategory.Questions.Count(); i++)
                                {
                                    <div class="mt-2 ">
                                        <a class="btn btn-lg buttonBorder" href="/question/@subcategory.Questions[i].Id">Question: @(i+1)</a>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
             </ul>
        </div>
      </div>
         
}
@if (completionPercentage != null)
{
    <h5>Completion: @completionPercentage%</h5>
}


<a href="/home" class="btn btn-lg buttonBorder">Go back</a>


@code {
    [Parameter]
    public int Id { get; set; }
    public SegmentModel? ChosenSegment { get; set; }
    private List<SubCategoryModel> subCategories = new();
    private List<QuestionViewModel> questions = new();
    private bool questionAnsweredCorrectly;
    private double? completionPercentage;
    private bool IsCollapsed { get; set; } = false;

    private ApplicationUser? signedInUser;
    private AuthenticationState authenticationState;

    protected override async Task OnParametersSetAsync()
    {
        authenticationState = await authenticationStateProvider.GetAuthenticationStateAsync();
        if (authenticationState.User.Identity.IsAuthenticated)
        {
            signedInUser = await signInManager.UserManager.GetUserAsync(authenticationState.User);
        }

        ChosenSegment = await uow.SegmentRepo.GetByIdAsync(Id);

        subCategories = await uow.SubcategoryRepo.GetSubcategoriesInSegment(Id);

        //Gör ViewModel som innehåller användarens progress så man kan displaya röd eller grön text.
        // foreach (var question in ChosenSegment.Questions)
        // {
        //     QuestionViewModel newQuestion = new()
        //         {
        //             Id = question.Id,
        //             Title = question.Title,
        //         };
        //     try
        //     {
        //         //Kollar vad användaren har svarat
        //         newQuestion.IsAnsweredCorrectly = await questionManager.QuestionAnsweredCorrectly(question.Id, signedInUser);
        //     }
        //     catch
        //     {
        //         //Användaren har inte svarat på frågan
        //         newQuestion.IsAnsweredCorrectly = false;
        //     }

        //     questions.Add(newQuestion);
        // }
        try
        {
            //Räknar ut användarens svarsprocent
            completionPercentage = await questionManager.CalculateCorrectPercentage(ChosenSegment.Id, signedInUser);
        }
        catch
        {
            //Har inte svarat på frågorna än eller så finns det inga frågor i segmentet
        }

    }

    private async Task ToggleCollapse()
    {
        IsCollapsed = !IsCollapsed;

    }

}
