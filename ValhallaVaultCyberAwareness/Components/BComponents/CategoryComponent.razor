@using ValhallaVaultCyberAwareness.Data
@using ValhallaVaultCyberAwareness.Managers
@using ValhallaVaultCyberAwareness.Models 
@using Microsoft.JSInterop
@using ValhallaVaultCyberAwareness.Repository
@rendermode InteractiveServer
@inject ValhallaUow uow
@inject NavigationManager NavigationManager
@inject ProgressManager progressManager
<p>
    <button class="btn buttonBorder w-50" type="button" @onclick="ToggleCollapse">
        @Category.Name
    </button>
</p>
<div class="@(IsCollapsed ? "" : "collapse")" id="@($"collapseExample-{Category.Id}")">
    <div class="card bg-dark text-light" style="border:none !important;">
        <div class="card-body">
            @if (Segments != null && Segments.Any())
            {   <div class="d-flex flex-column align-items-center">
                    @foreach (var segment in Segments)
                    {
                        @* segment.IsAvailable finns på SegmentViewModels och visar om användaren har tillgång till segmentet *@
                        <button @onclick="(() => NavigateToSegment(segment))" class=" btn btn-lg mt-1 @(segment.IsAvailable ? "text-light" : "text-danger")" style="border:1px solid #21e8ef; width:50%">@segment.Name</button>
                        <p>@(segment.IsAvailable ? $"{segment.SegmentProgress}% complete" : "Finish previous segment")</p>
                    }
                </div>
                
            }
            else if (IsCollapsed && Segments == null)
            {
                <p>Loading...</p>
            }
        </div>
    </div>
</div>


@code {
    [Parameter]
    public CategoryModel? Category { get; set; }
    [Parameter]
    public ApplicationUser? SignedInUser { get; set; }

    private bool IsCollapsed { get; set; } = false;

    private List<SegmentViewModel>? Segments { get; set; } = null;

    private async Task ToggleCollapse()
    {
        IsCollapsed = !IsCollapsed;

        if (IsCollapsed && Segments == null)
        {
            Segments = await progressManager.GetSegmentProgressInCategoryAsync(SignedInUser, Category.Id);
        }
    }

    private void NavigateToSegment(SegmentViewModel segment)
    {
        if(segment.IsAvailable)
        {
            NavigationManager.NavigateTo($"/Segment/{segment.Id}");
        }
    }


}




