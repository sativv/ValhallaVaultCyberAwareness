@using ValhallaVaultCyberAwareness.Models
@using ValhallaVaultCyberAwareness.Repository
@rendermode InteractiveServer
@inject NavigationManager navManager
@inject ValhallaUow uow
@inject IJSRuntime JSRuntime

   
    @if (Questions == null)
{
    <h1>Loading Questions...</h1>
}
else
{
    <div class="card bg-dark text-light" style="border:none !important;">
        <div class="card-header" @onclick="Toggle">
            <button class="btn btn-lg buttonBorder w-100">Edit / Remove Questions</button>
        </div>
        <div class="@(IsCollapsed ? "collapse" : "")">
            <div class="card-body">
                <div class="d-flex flex-column align-items-center">
                    <strong class="mb-1">Which Question Would You Like to Delete or Edit?</strong>
                    <select @bind="QuestionToEditOrDelete" class="inputBorder w-100 mb-1">
                @foreach (var question in Questions)
                {
                            <option value="@question.Id" style="background-color:#292b2c">@question.Title</option>
                           
                  
                }
                </select>
                    <div class="d-flex mt-1 w-100">
                        <button class="btn buttonBorder w-50" style="border:1px solid red" @onclick="() => RemoveQuestion(QuestionToEditOrDelete)">Delete</button>
                        <button class="btn buttonBorder w-50" style="border:1px solid yellow" @onclick="() => RedirectToEditQuestionPage(QuestionToEditOrDelete)">Edit</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public List<QuestionModel> Questions { get; set; }
    public int QuestionToEditOrDelete;

    private bool IsCollapsed = true;

    private string CollapseClass => IsCollapsed ? "collapse" : "";

    private void Toggle()
    {
        IsCollapsed = !IsCollapsed;
    }

    public async Task  RedirectToEditQuestionPage(int id)
    {
        if (id != null)
        {

            navManager.NavigateTo($"/AdminQ/{id}");
        }
    }  

    public async Task RemoveQuestion(int id)
    {
        if(id != 0)
        {
            if (!await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to remove this question?"))
                return;

                QuestionModel questionToRemove = await uow.QuestionRepo.GetByIdAsync(id);
                uow.QuestionRepo.RemoveByIdAsync(id);
                Questions.Remove(questionToRemove);
                StateHasChanged();
        }
    }

}


